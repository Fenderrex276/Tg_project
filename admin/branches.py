from aiogram import Bot, Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from .states import AdminStates
from .apikeys import api_keys_arr
from db.models import RoundVideo
from initialize import bot as mainbot
class Admin:
    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_commands()
        self.register_handlers()

    def register_commands(self):
        ...

    def register_handlers(self):
        self.dp.register_message_handler(self.start_handler, commands=["start"], state='*')
        self.dp.register_message_handler(self.start_handler, text=["start"], state='*')
        self.dp.register_message_handler(self.check_key, state=AdminStates.input_key)
        self.dp.register_callback_query_handler(self.enter, text='enter_bot')
        self.dp.register_message_handler(self.reports, text="‚úÖ –†–µ–ø–æ—Ä—Ç—ã", state="*")
        self.dp.register_callback_query_handler(self.access_video, text='good', state="*")
        self.dp.register_callback_query_handler(self.refused_video, text='bad', state="*")

    async def start_handler(self, message: types.Message):
        msg = "–í–≤–µ–¥–∏ —Å–≤–æ–π üóù –∫–ª—é—á –¥–ª—è –≤—Ö–æ–¥–∞:"
        await self.bot.send_message(message.from_user.id, msg)
        await AdminStates.input_key.set()

    async def check_key(self, message: types.Message, state: FSMContext):
        if message.text in api_keys_arr:
            await self.bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ!")
            await self.bot.send_message(message.from_user.id, "–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                                        reply_markup=types.InlineKeyboardMarkup()
                                        .add(types.InlineKeyboardButton('üîí –í–æ–π—Ç–∏', callback_data='enter_bot')
            ))
            await state.finish()
        else:
            await self.bot.send_message(message.from_user.id, "–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")

    async def enter(self, call: types.CallbackQuery, state: FSMContext):
        await self.bot.send_message(call.from_user.id, "–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=types.ReplyKeyboardMarkup(
            [[types.KeyboardButton("‚úÖ –†–µ–ø–æ—Ä—Ç—ã")], [types.KeyboardButton("üíö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã")]], resize_keyboard=True
        ))

    async def reports(self, message: types.Message, state: FSMContext):

        users = RoundVideo.objects.all()
        if len(users) == 0:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ")
        else:

                id_dispute = str(users[len(users) - 1].user_tg_id)
                disput = id_dispute[5:len(id_dispute)]
                tmp_msg = (f"–î–∏—Å–ø—É—Ç #{disput}\n"
                           f"*–î–µ–Ω—å 0*\n\n"
                           f"üîí 3 0 2 8\n"
                           f"–±—Ä–æ—à—É/–Ω–∞—á–Ω—É –¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ")
                print(users[len(users) - 1].tg_id, "ADMIN BOT")
                await state.update_data(video_user_id=users[len(users) - 1].tg_id)
                await message.answer(text=tmp_msg)

                await message.answer_video_note(video_note=users[len(users) - 1].tg_id,
                                                reply_markup=types.InlineKeyboardMarkup().add(
                                                     types.InlineKeyboardButton(text="‚õîÔ∏è –ù–µ –æ–∫", callback_data="bad"),
                                                     types.InlineKeyboardButton(text="üëç –û–∫", callback_data="good"))
                                                )

    async def access_video(self, call: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        RoundVideo.objects.filter(tg_id=data['video_user_id']).update(status="good")
        await call.message.answer(text="–ì–æ—Ç–æ–≤–æ")
        user = RoundVideo.objects.get(tg_id=data['video_user_id'])
        success_keyboard = types.InlineKeyboardMarkup()
        success_keyboard.add(types.InlineKeyboardButton(text='üëç –•–æ—Ä–æ—à–æ', callback_data='good'))
        await mainbot.send_message(text="–û—Ç–ª–∏—á–Ω–æ üî• –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å", chat_id=user.chat_tg_id)
        await mainbot.send_message(text="–¢–≤–æ–π –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –∑–∞–≤—Ç—Ä–∞.", chat_id=user.chat_tg_id,
                                   reply_markup=success_keyboard)

    async def refused_video(self, call: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        RoundVideo.objects.filter(data['video_user_id']).update(status="bad")
        await call.message.answer(text="–ì–æ—Ç–æ–≤–æ")

