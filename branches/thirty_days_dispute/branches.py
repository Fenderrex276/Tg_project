from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InputFile
from .keyboards import *
from .states import StatesDispute


class CurrentDispute:
    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_commands()
        self.register_handlers()

    def register_commands(self):
        ...

    def register_handlers(self):
        self.dp.register_message_handler(self.the_hero_path, text=[menu_keyboard, "‚úÖ –ü—É—Ç—å –≥–µ—Ä–æ—è"], state="*")
        self.dp.register_message_handler(self.knowledge_base, text=[menu_keyboard, "üíö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"], state="*")
    async def the_hero_path(self, message: types.Message, state: FSMContext):

        data = await state.get_data()
        purpose = InputFile
        video_with_code = ""
        time_before = "22:30"

        if data['action'] == 'alcohol':
            purpose = InputFile("media/disputs_images/alcohol.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∞–ª–∫–æ—Ç–µ—Å—Ç–æ–º"

        elif data['action'] == 'smoking':
            purpose = InputFile("media/disputs_images/smoking.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º"
        elif data['action'] == 'drugs':
            purpose = InputFile("media/disputs_images/drugs.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º –Ω–∞ –ü–ê–í"
        elif data['action'] == "gym":
            purpose = InputFile("media/disputs_images/gym.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ —Å–ø–æ—Ä—Ç-–∑–∞–ª–∞"
        elif data['action'] == "weight":
            purpose = InputFile("media/disputs_images/weight.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å –∫–æ–¥–æ–º"
        elif data['action'] == "morning":
            if data['additional_action'] == 'five_am':
                time_before = "5:30"
                purpose = InputFile("media/disputs_images/five_am.jpg")
            elif data['additional_action'] == 'six_am':
                time_before = "6:30"
                purpose = InputFile("media/disputs_images/six_am.jpg")
            elif data['additional_action'] == 'seven_am':
                time_before = "7:30"
                purpose = InputFile("media/disputs_images/seven_am.jpg")
            elif data['additional_action'] == 'eight_am':
                time_before = "8:30"
                purpose = InputFile("media/disputs_images/eight_am.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ –≤–∞–Ω–Ω—ã"
        elif data['action'] == "language":
            if data['additional_action'] == 'english':
                purpose = InputFile("media/disputs_images/english.jpg")
            elif data['additional_action'] == 'chinese':
                purpose = InputFile("media/disputs_images/chinese.jpg")
            elif data['additional_action'] == 'spanish':
                purpose = InputFile("media/disputs_images/spanish.jpg")
            elif data['additional_action'] == 'arabian':
                purpose = InputFile("media/disputs_images/arabian.jpg")
            elif data['additional_action'] == 'italian':
                purpose = InputFile("media/disputs_images/italian.jpg")
            elif data['additional_action'] == 'french':
                purpose = InputFile("media/disputs_images/french.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏"
        elif data['action'] == 'money':
            if data['additional_action'] == 'hundred':
                purpose = InputFile("media/disputs_images/hundred.jpg")
            elif data['additional_action'] == 'three_hundred':
                purpose = InputFile("media/disputs_images/three_hundred.jpg")
            video_with_code = "ü§≥ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∏–∑ –±–∞–Ω–∫–∞ —Å –∫–æ–¥–æ–º"
        elif data['action'] == 'food':
            purpose = InputFile("media/disputs_images/food.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
        elif data['action'] == 'programming':
            purpose = InputFile("media/disputs_images/programming.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
        elif data['action'] == 'instruments':
            if data['additional_action'] == 'piano':
                purpose = InputFile("media/disputs_images/piano.jpg")
            elif data['additional_action'] == 'guitar':
                purpose = InputFile("media/disputs_images/guitar.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
        elif data['action'] == 'painting':
            purpose = InputFile("media/disputs_images/painting.jpg")
            video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"

        start_current_disput_msg = ("*–î–æ –ø–æ–±–µ–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å 30 –¥–Ω–µ–π*\n\n"
                                    "–£—Å–ª–æ–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π\n"
                                    f"{video_with_code}\n"
                                    f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–æ—Ç –¥–æ {time_before}\n\n"

                                    f"üßä –î–µ–ø–æ–∑–∏—Ç: {data['deposit']} ‚ÇΩ \n\n")
        await message.answer_photo(photo=purpose)
        await message.answer(text=start_current_disput_msg, reply_markup=report_diary_keyboard,
                             parse_mode=ParseMode.MARKDOWN)

    async def knowledge_base(self, message: types.Message):
        msg = ("*üíö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π* \n\n"
               "–ß–∏—Ç–∞–π—Ç–µ –æ —Ç–æ–º, –∫–∞–∫ –∂–∏–≤—É—Ç –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –ª—é–¥–∏ –ø–ª–∞–Ω–µ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–º—ã,"
               " –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–µ–ª–∏–∫–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –∫–∏–Ω–æ, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, "
               "–∫–∞–∫ –ª–µ–≥—á–µ –∏ –ø—Ä–æ—â–µ –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ–∫—É—Å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é:")

        await message.answer(text=msg, reply_markup=knowledge_base_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
