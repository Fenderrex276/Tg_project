from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InputFile
from .keyboards import *
from .states import StatesDispute
from .callbacks import video_text


class CurrentDispute:
    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_commands()
        self.register_handlers()

    def register_commands(self):
        ...

    def register_handlers(self):
        self.dp.register_message_handler(self.the_hero_path, text=[menu_keyboard, "‚úÖ –ü—É—Ç—å –≥–µ—Ä–æ—è"],
                                         state=StatesDispute.all_states)
        self.dp.register_message_handler(self.knowledge_base, text=[menu_keyboard, "üíö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"],
                                         state=StatesDispute.all_states)
        self.dp.register_message_handler(self.account, text=[menu_keyboard, "üü¢ –ê–∫–∫–∞—É–Ω—Ç"],
                                         state=StatesDispute.all_states)

        self.dp.register_message_handler(self.process_name_invalid, lambda message: len(message.text) > 20,
                                         state=StatesDispute.change_name)

        self.dp.register_message_handler(self.input_name, state=StatesDispute.change_name)

    async def the_hero_path(self, message: types.Message, state: FSMContext):
        await StatesDispute.none.set()
        data = await state.get_data()
        print(data)
        recieve_message = video_text(data)
        await state.update_data(name=message.from_user.first_name)

        await message.answer_photo(photo=InputFile(recieve_message[0]))
        await message.answer(text=recieve_message[1], reply_markup=report_diary_keyboard,
                             parse_mode=ParseMode.MARKDOWN)

    async def knowledge_base(self, message: types.Message):
        await StatesDispute.knowledge_base.set()
        msg = ("*üíö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π* \n\n"
               "–ß–∏—Ç–∞–π—Ç–µ –æ —Ç–æ–º, –∫–∞–∫ –∂–∏–≤—É—Ç –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –ª—é–¥–∏ –ø–ª–∞–Ω–µ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–º—ã,"
               " –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–µ–ª–∏–∫–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –∫–∏–Ω–æ, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, "
               "–∫–∞–∫ –ª–µ–≥—á–µ –∏ –ø—Ä–æ—â–µ –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ–∫—É—Å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é:")

        await message.answer(text=msg, reply_markup=knowledge_base_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

    async def account(self, message: types.Message, state: FSMContext):
        await StatesDispute.account.set()
        user = await state.get_data()
        msg = (f"üëã *–ü—Ä–∏–≤–µ—Ç, {user['name']}* \n\n"
               "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è, –≤—ã–≤–µ—Å—Ç–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç, "
               "–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—Ö. "
               "–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

        await message.answer(text=msg, reply_markup=account_keyboard, parse_mode=ParseMode.MARKDOWN)

    async def input_name(self, message: types.Message, state: FSMContext):
        await StatesDispute.account.set()
        await state.update_data(name=message.text)

        await message.answer(text='–ì–æ—Ç–æ–≤–æ!')

    async def process_name_invalid(self, message: types.Message):
        msg = "–ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
        return await message.answer(msg)
