from aiogram import Dispatcher
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
import secrets
from client.branches.confirm_dispute.states import Promo
from client.branches.pay.keyboards import *
from client.branches.pay.messages import *
from client.branches.pay.states import PayStates
from db.models import User
from client.tasks import del_scheduler, reminder_scheduler_add_job
from client.initialize import dp
from client.branches.thirty_days_dispute.keyboards import menu_keyboard


async def choose_sum_to_pay(call: types.CallbackQuery, state: FSMContext):
    await PayStates.pay.set()

    del_scheduler(f'{call.from_user.id}_reminder', 'client')
    redis_data = await state.get_data()

    await reminder_scheduler_add_job(dp, redis_data['timezone'], 'reminder', call.from_user.id, 2, notification_hour=10,
                                     notification_min=0)

    await call.message.answer(text=deposit_msg, reply_markup=types.ReplyKeyboardRemove())
    await call.message.answer(text="*–í—ã–±–µ—Ä–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é —Å—É–º–º—É*", parse_mode=ParseMode.MARKDOWN_V2,
                              reply_markup=choose_sum_keyboard)
    await call.answer()


async def check_sum(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(deposit=call.data)
    await PayStates.none.set()
    await call.message.edit_text(text=application_for_payment_msg, reply_markup=get_banking_detials_keyboard,
                                 parse_mode=ParseMode.MARKDOWN)
    await call.answer()
    del_scheduler(f'{call.from_user.id}_reminder', 'client')

    redis_data = await state.get_data()
    await reminder_scheduler_add_job(dp, redis_data['timezone'], 'reminder', call.from_user.id, 3, notification_hour=10,
                                     notification_min=0)


async def other_sum_to_pay(call: types.CallbackQuery):
    await PayStates.input_sum.set()
    await call.message.answer(text=other_sum_msg, reply_markup=types.ReplyKeyboardRemove())
    await call.answer()


async def get_bank_details(call: types.CallbackQuery, state: FSMContext):
    money = await state.get_data()
    bank_details_msg = ("–ó–∞—è–≤–∫–∞ #TG2802\n –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É:\n"
                        f" {money['deposit']} ‚ÇΩ\n –ü–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∫–∞—Ä—Ç—ã:\n"
                        " 4276 4000 4033 9999\n (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞)")
    await call.message.edit_text(text=bank_details_msg, reply_markup=confirm_deposit_payed_keyboard)
    await call.answer()
    del_scheduler(f'{call.from_user.id}_reminder', 'client')

    redis_data = await state.get_data()
    await reminder_scheduler_add_job(dp, redis_data['timezone'], 'reminder', call.from_user.id, 4, notification_hour=10,
                                     notification_min=0)


async def successful_payment(call: types.CallbackQuery, state: FSMContext):
    v = await state.get_data()

    await call.message.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ —Ç—ã —É–∂–µ –≤ —à–∞–≥–µ –æ—Ç —Ü–µ–ª–∏. –ó–∞—è–≤–∫–∞ #TG2802 —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞.\n\n",
                              reply_markup=menu_keyboard)

    success_payment_msg = (f" üî• –¢–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {v['deposit']} ‚ÇΩ –∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –∫–æ–Ω—Ü–∞ –ø–∞—Ä–∏ ‚Äî —Å–æ–±–ª—é–¥–∞–π "
                           f"—É—Å–ª–æ–≤–∏—è –∫–∞–∂–¥—ã–π"
                           " –∏–∑ 30 –¥–Ω–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–∏ –¥–µ–ø–æ–∑–∏—Ç, –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ–±—è")

    await call.message.answer(text=success_payment_msg, reply_markup=go_keyboard)
    await call.answer()

    redis_data = await state.get_data()
    del_scheduler(f'{call.from_user.id}_reminder', 'client')
    start_d = ""
    if redis_data['start_disput'] == "select_after_tomorrow":
        start_d = "tomorrow"
    elif redis_data['start_disput'] == "select_monday":
        start_d = "monday"
    deposit = int(redis_data['deposit'].replace(" ", ""))

    mistake = 0
    if redis_data['promocode'] != '0':
        mistake = 1
    try:
        user = await User.objects.aget(user_id=call.from_user.id)
        user.user_name = call.from_user.first_name
        user.action = redis_data['action']
        user.additional_action = redis_data['additional_action']
        user.start_disput = start_d
        user.promocode_user = secrets.token_hex(nbytes=5)
        user.promocode_from_friend = redis_data['promocode']
        user.count_days = 30
        user.timezone = redis_data['timezone']
        user.deposit = deposit
        user.count_mistakes = (2 + mistake)
        user.save()
    except Exception:
        await User.objects.acreate(user_id=call.from_user.id,
                                   user_name=call.from_user.first_name,
                                   action=redis_data['action'],
                                   additional_action=redis_data['additional_action'],
                                   start_disput=start_d,
                                   deposit=deposit,
                                   promocode_user=secrets.token_hex(nbytes=5),
                                   promocode_from_friend=redis_data['promocode'],
                                   count_days=30,
                                   timezone=redis_data['timezone'],
                                   count_mistakes=(2 + mistake))

    await state.update_data(name=call.from_user.first_name)

    await reminder_scheduler_add_job(dp, redis_data['timezone'], 'send_test_period_reminder', call.from_user.id, notification_hour=10,
                                     notification_min=0)



async def start_current_disput(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    purpose = ""
    video_with_code = ""
    time_before = "22:30"

    if data['action'] == 'alcohol':
        purpose = "üç∑ –ë—Ä–æ—à—É –ø–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∞–ª–∫–æ—Ç–µ—Å—Ç–æ–º"

    elif data['action'] == 'smoking':
        purpose = "üö¨ –ë—Ä–æ—à—É –∫—É—Ä–∏—Ç—å –Ω–∏–∫–æ—Ç–∏–Ω"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º"
    elif data['action'] == 'drugs':
        purpose = "üíä –ë—Ä–æ—à—É —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –ü–ê–í"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º –Ω–∞ –ü–ê–í"
    elif data['action'] == "gym":
        purpose = "üí™ –ë—É–¥—É —Ö–æ–¥–∏—Ç—å –≤ —Å–ø–æ—Ä—Ç-–∑–∞–ª"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ —Å–ø–æ—Ä—Ç-–∑–∞–ª–∞"
    elif data['action'] == "weight":
        purpose = "üå± –ü–æ—Ö—É–¥–µ—é –Ω–∞ 5 –∫–≥"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å –∫–æ–¥–æ–º"
    elif data['action'] == "morning":
        if data['additional_action'] == 'five_am':
            time_before = "5:30"
            purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 5 —É—Ç—Ä–∞"
        elif data['additional_action'] == 'six_am':
            time_before = "6:30"
            purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 6 —É—Ç—Ä–∞"
        elif data['additional_action'] == 'seven_am':
            time_before = "7:30"
            purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 7 —É—Ç—Ä–∞"
        elif data['additional_action'] == 'eight_am':
            time_before = "8:30"
            purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 8 —É—Ç—Ä–∞"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ –≤–∞–Ω–Ω—ã"
    elif data['action'] == "language":
        if data['additional_action'] == 'english':
            purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"
        elif data['additional_action'] == 'chinese':
            purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫"
        elif data['additional_action'] == 'spanish':
            purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫"
        elif data['additional_action'] == 'arabian':
            purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∞—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫"
        elif data['additional_action'] == 'italian':
            purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —è–∑—ã–∫"
        elif data['additional_action'] == 'french':
            purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏"
    elif data['action'] == 'money':
        if data['additional_action'] == 'hundred':
            purpose = "üí∞–ù–∞–∫–æ–ø–ª—é 100 000 ‚ÇΩ"
        elif data['additional_action'] == 'three_hundred':
            purpose = "üí∞–ù–∞–∫–æ–ø–ª—é 300 000 ‚ÇΩ"
        video_with_code = "ü§≥ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∏–∑ –±–∞–Ω–∫–∞ —Å –∫–æ–¥–æ–º"
    elif data['action'] == 'food':
        purpose = "üçè –ù–∞—É—á—É—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—É—é –µ–¥—É"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    elif data['action'] == 'programming':
        purpose = "üíª –ù–∞—É—á—É—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    elif data['action'] == 'instruments':
        if data['additional_action'] == 'piano':
            purpose = "üéº –ù–∞—É—á—É—Å—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ"
        elif data['additional_action'] == 'guitar':
            purpose = "üéº –ù–∞—É—á—É—Å—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    elif data['action'] == 'painting':
        purpose = "üé® –ù–∞—É—á—É—Å—å —Ä–∏—Å–æ–≤–∞—Ç—å"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    promo = data['promocode']
    if promo != '0':
        promo = '1'
    start_current_disput_msg = (f"üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name},"
                                f" –∑–∞–≤–µ—Ä—à–∏ —Å–≤–æ—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Ü–µ–ª–∏ –∏ –Ω–∞—á–Ω–∏ –ø—É—Ç—å –≥–µ—Ä–æ—è.\n\n"
                                "*–¢–≤–æ—è —Ü–µ–ª—å:*\n"
                                f"{purpose}\n"
                                f"üßä –î–µ–ø–æ–∑–∏—Ç: {data['deposit']} ‚ÇΩ \n\n"
                                "*–£—Å–ª–æ–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π*\n"
                                f"{video_with_code}\n"
                                f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–æ—Ç –¥–æ {time_before}\n\n"
                                "–î–æ –ø–æ–±–µ–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å 30 –¥–Ω–µ–π\n"
                                f"–ü—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫—É: {promo}")

    await call.message.edit_text(text=start_current_disput_msg, reply_markup=next_step_keyboard,
                                 parse_mode=ParseMode.MARKDOWN)
    await call.answer()


def register_callback(bot, dp: Dispatcher):
    dp.register_callback_query_handler(choose_sum_to_pay, text='make_deposit', state=Promo.none)
    dp.register_callback_query_handler(choose_sum_to_pay, text='start_pay_state', state=Promo.none)
    dp.register_callback_query_handler(choose_sum_to_pay, text='choose_current_sum', state=PayStates.all_states)
    dp.register_callback_query_handler(other_sum_to_pay, text='other_sum', state=PayStates.pay)
    dp.register_callback_query_handler(check_sum, text='15 000', state=PayStates.pay)
    dp.register_callback_query_handler(check_sum, text='30 000', state=PayStates.pay)
    dp.register_callback_query_handler(check_sum, text='50 000', state=PayStates.pay)
    dp.register_callback_query_handler(check_sum, text='100 000', state=PayStates.pay)
    dp.register_callback_query_handler(get_bank_details, text='get_pay_details', state=PayStates.all_states)
    dp.register_callback_query_handler(get_bank_details, text='get_details', state=PayStates.none)
    dp.register_callback_query_handler(successful_payment, text='access', state=PayStates.none)
    dp.register_callback_query_handler(successful_payment, text='confirm_deposit', state=PayStates.none)
    dp.register_callback_query_handler(start_current_disput, text='go_disput', state=PayStates.none)
    dp.register_callback_query_handler(start_current_disput, text='start_current_dispute', state=PayStates.none)
