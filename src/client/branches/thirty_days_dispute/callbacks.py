import random
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, ParseMode
from .diary import questions
from .keyboards import *
from .states import StatesDispute, NewReview
from db.models import RoundVideo, User
from ..confirm_dispute.keyboards import choose_time_zone_keyboard
from ..dispute_with_friend.messages import personal_goals_msg
from client.tasks import del_scheduler, change_period_task_info, reminder_scheduler_add_job
from django.db.models import Q


async def begin_dispute(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.none.set()
    await state.update_data(is_deleted=-1)

    data = await state.get_data()

    recieve_message = video_text(data, 30)

    await call.message.answer_photo(photo=InputFile(recieve_message[0]), caption=recieve_message[1],
                                    reply_markup=menu_keyboard,
                                    parse_mode=ParseMode.MARKDOWN)
    await call.answer()


def video_text(data: dict, count_days: int):
    purpose = ""
    video_with_code = ""
    time_before = "22:30"

    if data['action'] == 'alcohol':
        purpose = "client/media/disputs_images/alcohol.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∞–ª–∫–æ—Ç–µ—Å—Ç–æ–º"

    elif data['action'] == 'smoking':
        purpose = "client/media/disputs_images/smoking.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º"
    elif data['action'] == 'drugs':
        purpose = "client/media/disputs_images/drugs.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º –Ω–∞ –ü–ê–í"
    elif data['action'] == "gym":
        purpose = "client/media/disputs_images/gym.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ —Å–ø–æ—Ä—Ç-–∑–∞–ª–∞"
    elif data['action'] == "weight":
        purpose = "client/media/disputs_images/weight.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å –∫–æ–¥–æ–º"
    elif data['action'] == "morning":
        if data['additional_action'] == 'five_am':
            time_before = "5:30"
            purpose = "client/media/disputs_images/five_am.jpg"
        elif data['additional_action'] == 'six_am':
            time_before = "6:30"
            purpose = "client/media/disputs_images/six_am.jpg"
        elif data['additional_action'] == 'seven_am':
            time_before = "7:30"
            purpose = "client/media/disputs_images/seven_am.jpg"
        elif data['additional_action'] == 'eight_am':
            time_before = "8:30"
            purpose = "client/media/disputs_images/eight_am.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ –≤–∞–Ω–Ω—ã"
    elif data['action'] == "language":
        if data['additional_action'] == 'english':
            purpose = "client/media/disputs_images/english.jpg"
        elif data['additional_action'] == 'chinese':
            purpose = "client/media/disputs_images/chinese.jpg"
        elif data['additional_action'] == 'spanish':
            purpose = "client/media/disputs_images/spanish.jpg"
        elif data['additional_action'] == 'arabian':
            purpose = "client/media/disputs_images/arabian.jpg"
        elif data['additional_action'] == 'italian':
            purpose = "client/media/disputs_images/italian.jpg"
        elif data['additional_action'] == 'french':
            purpose = "client/media/disputs_images/french.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏"
    elif data['action'] == 'money':

        if data['additional_action'] == 'hundred':
            purpose = "client/media/disputs_images/hundred.jpg"
        elif data['additional_action'] == 'three_hundred':
            purpose = "client/media/disputs_images/three_hundred.jpg"
        video_with_code = "ü§≥ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∏–∑ –±–∞–Ω–∫–∞ —Å –∫–æ–¥–æ–º"
    elif data['action'] == 'food':
        purpose = "client/media/disputs_images/food.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    elif data['action'] == 'programming':
        purpose = "client/media/disputs_images/programming.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    elif data['action'] == 'instruments':
        if data['additional_action'] == 'piano':
            purpose = "client/media/disputs_images/piano.jpg"
        elif data['additional_action'] == 'guitar':
            purpose = "client/media/disputs_images/guitar.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
    elif data['action'] == 'painting':
        purpose = "client/media/disputs_images/painting.jpg"
        video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"

    start_current_disput_msg = (f"*–î–æ –ø–æ–±–µ–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å {count_days} –¥–Ω–µ–π*\n\n"
                                "–£—Å–ª–æ–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π\n"
                                f"{video_with_code}\n"
                                f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–æ—Ç –¥–æ {time_before}\n\n"

                                f"üßä –î–µ–ø–æ–∑–∏—Ç: {data['deposit']} ‚ÇΩ \n\n")

    return [purpose, start_current_disput_msg]


def get_time_to_send_dispute(data):
    time_t = 22

    if data['action'] == 'morning':
        if data['additional_action'] == 'five_am':
            time_t = 5
        elif data['additional_action'] == 'six_am':
            time_t = 6
        elif data['additional_action'] == 'seven_am':
            time_t = 7
        elif data['additional_action'] == 'eight_am':
            time_t = 8
    return (f"‚åõÔ∏è –í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ –ø—Ä–∞–≤–∏–ª–∞–º –î–∏—Å–ø—É—Ç–∞, "
            f"–º—ã –∂–¥—ë–º —Ç–≤–æ–π —Ä–µ–ø–æ—Ä—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ {time_t}:30 —É—Ç—Ä–∞.")


async def reports(call: types.CallbackQuery, state: FSMContext, dp: Dispatcher):
    main_photo = InputFile("client/media/Disput Bot-2/Default.png")
    try:
        user = User.objects.get(user_id=call.from_user.id)
    except User.DoesNotExist:
        print(f'–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id:{call.from_user.id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return

    current_video = RoundVideo.objects.filter(user_tg_id=call.from_user.id,
                                              type_video=RoundVideo.TypeVideo.archive).last()

    # videos = RoundVideo.objects.filter(user_tg_id=call.from_user.id, type_video=RoundVideo.TypeVideo.dispute, tg_id="")

    # if len(videos) > 1:
    #     user.count_mistakes = user.count_mistakes - 1
    #     user.save()

    # print(user.count_mistakes, ":USER MISTAKES, ", user.promocode_from_friend, "promocode", user.count_days,
    #       current_video.tg_id, "THIS TG_ID")

    if current_video.status == "good" and user.count_days != 30:

        if (user.count_mistakes == 3 or (
                user.count_mistakes == 2 and user.promocode_from_friend == '0')) and current_video.n_day == 1:
            main_photo = InputFile(f"client/media/days_of_dispute/days/{1}.png")
        elif user.count_mistakes == 3 or (
                user.count_mistakes == 2 and user.promocode_from_friend == '0') and current_video.n_day != 0:
            main_photo = InputFile(f"client/media/days_of_dispute/days/{30 - user.count_days}-{1}.png")
        elif (user.count_mistakes == 2 or (
                user.count_mistakes == 1 and user.promocode_from_friend == '0')) and current_video.n_day != 0:
            main_photo = InputFile(f"client/media/days_of_dispute/days/{30 - user.count_days}.png")
        elif user.count_days == 0 and user.count_mistakes != 0:
            main_photo = InputFile("client/media/days_of_dispute/days/USER WIN.png")
            # TODO –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä–µ
            # TODO RUS –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–∑—ã–≤—ã –µ—Å–ª–∏ –æ–Ω –ø–æ–±–µ–¥–∏–ª
            await reminder_scheduler_add_job(dp, user.timezone, 'send_reminder_after_end', call.from_user.id,
                                             notification_hour=10,
                                             notification_min=0)

    elif current_video.status == "bad" and user.count_days != 30:
        if user.count_mistakes == 2 and current_video.n_day == 1 and user.promocode_from_friend != '0':
            main_photo = InputFile(f"client/media/days_of_dispute/days/{1}-{2}.png")
        elif user.count_mistakes == 1 and current_video.n_day == 1 and user.promocode_from_friend == '0':
            main_photo = InputFile(f"client/media/days_of_dispute/days/{1}-{1}.png")
        elif user.count_mistakes == 2 and user.promocode_from_friend != '0':
            main_photo = InputFile(f"client/media/days_of_dispute/days/{30 - user.count_days}-{3}.png")

        elif user.count_mistakes == 1:
            main_photo = InputFile(f"client/media/days_of_dispute/days/{30 - user.count_days}-{2}.png")
        elif user.count_mistakes == 0:
            main_photo = InputFile(f"client/media/days_of_dispute/days/USER SAD FINISH.png")

    cur_state = await state.get_state()
    if cur_state not in StatesDispute.states_names:
        return
    else:
        await StatesDispute.reports.set()

    await state.update_data(is_deleted=-1)

    if user.count_mistakes == 0:
        # TODO –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä–µ
        await reminder_scheduler_add_job(dp, user.timezone, 'send_reminder_after_end', call.from_user.id,
                                         notification_hour=10,
                                         notification_min=0)
        await state.update_data(deposit=0)
        user.count_days = 0
        user.save()

        await call.message.answer_photo(InputFile(f"client/media/days_of_dispute/days/USER SAD FINISH.png"),
                                        reply_markup=new_menu_keyboard)
        await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=end_game_keyboard)
    else:
        await call.message.answer_photo(main_photo, reply_markup=report_keyboard)

    await call.answer()


async def choose_name_button(call: types.CallbackQuery, state: FSMContext):
    user = await state.get_data()
    msg = (f"üíé –í —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –¢–µ–ª–µ–≥—Ä–∞–º–º —É–∫–∞–∑–∞–Ω–æ –∏–º—è "
           f"{user['name']}. –í–ø–∏—à–∏ —Å—é–¥–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ, "
           "–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è –≤ –î–∏—Å–ø—É—Ç–µ")

    await call.message.edit_text(text=msg, reply_markup=change_name_keyboard)
    await call.answer()


async def change_name(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.change_name.set()
    msg = "üí¨ –í–≤–µ–¥–∏ —Å–≤–æ—ë –Ω–æ–≤–æ–µ –∏–º—è:"

    await call.message.edit_text(text=msg)
    await call.answer()


async def check_report(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.new_report.set()
    # await state.update_data(current_message=1, id_to_delete=call.message.message_id+1)

    try:
        user_videos = RoundVideo.objects.filter(user_tg_id=call.from_user.id,
                                                chat_tg_id=call.message.chat.id,
                                                type_video=RoundVideo.TypeVideo.dispute,
                                                tg_id="")
        data = await state.get_data()
        print("COUNT VIDEOS WITHOUT ID FILE", len(user_videos))
        # if len(user_videos) > 1:
        #     user_videos[0].tg_id = "0"
        #     user_videos[0].save()
        #
        #     user = await User.objects.filter(user_id=call.from_user.id).alast()
        #     user.count_mistakes = user.count_mistakes - 1
        #     user.save()
        #     error_dispute_msg = get_time_to_send_dispute(data)
        #     await call.message.answer(error_dispute_msg)
        #     return

        user_video = await RoundVideo.objects.filter(user_tg_id=call.from_user.id,
                                                     chat_tg_id=call.message.chat.id,
                                                     type_video=RoundVideo.TypeVideo.dispute
                                                     ).alast()

        # user_video = await RoundVideo.objects.aget(id_video=data['id_video_code'])
        if user_video.status == "" and user_video.tg_id != "":
            tmp_msg = "üéà –°–ø–∞—Å–∏–±–æ, —Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏."
            await call.message.edit_caption(caption=tmp_msg)
            await state.update_data(id_video_code="")
        else:
            new_code = " ".join(list(user_video.code_in_video))
            temp_array = get_message_video(data, new_code)
            await call.message.answer(text=temp_array[0])
            await state.update_data(new_code=user_video.code_in_video, id_video_code=user_video.id_video)
            if data['action'] == 'money':
                await StatesDispute.video.set()
                await call.message.answer_video(video=InputFile(temp_array[1]))
            else:
                await StatesDispute.video_note.set()
                await call.message.answer_video_note(video_note=InputFile(temp_array[1]))
    except:
        # ?????????????
        await call.message.edit_caption(caption='–¢–≤–æ–π –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–¥—ë—Ç –≤ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.')
    await call.answer()


async def recieved_video(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await StatesDispute.none.set()
    current_video = await RoundVideo.objects.filter(chat_tg_id=call.message.chat.id,
                                                    type_video=RoundVideo.TypeVideo.dispute,
                                                    id_video=data['id_video_code']).alast()
    current_video.tg_id = data['video_id']
    current_video.save()

    tmp_msg = "üéà –°–ø–∞—Å–∏–±–æ, —Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏."
    await call.bot.send_video_note(video_note=data['video_id'], chat_id=-1001845655881)
    await call.message.answer(text=tmp_msg)
    await call.answer()


async def send_new_report_from_admin(call: types.CallbackQuery, state: FSMContext):
    # print(call.from_user.id, call.message.chat.id)
    new_video = await RoundVideo.objects.filter(user_tg_id=call.from_user.id,
                                                chat_tg_id=call.message.chat.id,
                                                type_video=RoundVideo.TypeVideo.dispute
                                                ).alast()

    print(new_video.id_video)

    # data = await state.get_data()

    await state.update_data(new_code=new_video.code_in_video, id_video_code=new_video.id_video)

    new_code = " ".join(list(new_video.code_in_video))
    user = await User.objects.filter(user_id=call.from_user.id).alast()

    temp_array = get_message_video({'action': user.action, 'additional_action': user.additional_action}, new_code)

    await call.message.answer(text=temp_array[0])

    if user.action == 'money':
        await StatesDispute.video.set()
        await call.message.answer_video(video=InputFile(temp_array[1]))
    else:
        await StatesDispute.video_note.set()
        await call.message.answer_video_note(video_note=InputFile(temp_array[1]))
    await call.answer()


def get_message_video(data, new_code):
    tmp_msg = ""
    video = ""
    if data['action'] == 'alcohol':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ —Å —Ç–µ—Å—Ç–æ–º –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å"
                   f" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/alcohol.mp4"
    elif data['action'] == 'drugs':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 00:00 –∫—Ä—É–∂–æ—á–µ–∫ —Å —Ç–µ—Å—Ç–æ–º –Ω–∞ –ü–ê–í "
                   "(–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø–æ–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π), –æ—Ç–æ—Ä–≤–∏ –ø–æ–ª–æ—Å–∫—É,"
                   f" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/drugs.mp4"
    elif data['action'] == 'smoking':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ —Å —Ç–µ—Å—Ç–æ–º –Ω–∞ –Ω–∏–∫–æ—Ç–∏–Ω "
                   "(–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø–æ–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π), –æ—Ç–æ—Ä–≤–∏ –ø–æ–ª–æ—Å–∫—É –∫–∞–∫ –Ω–∞ "
                   f"–ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")

        video = "client/media/videos/smoke.mp4"
    elif data['action'] == 'gym':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ –≤ –∑–µ—Ä–∫–∞–ª–µ –≤ —Å–ø–æ—Ä—Ç-–∑–∞–ª–µ, "
                   f"–∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/gym.mp4"
    elif data['action'] == 'weight':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ —Å–≤–æ–µ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è,"
                   f" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/weight.mp4"
    elif data['action'] == 'morning':
        if data['additional_action'] == 'five_am':
            tmp_msg = f"‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 5:30 –∫—Ä—É–∂–æ—á–µ–∫ –≤ –∑–µ—Ä–∫–∞–ª–µ, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}"
        elif data['additional_action'] == 'six_am':
            tmp_msg = f"‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 6:30 –∫—Ä—É–∂–æ—á–µ–∫ –≤ –∑–µ—Ä–∫–∞–ª–µ, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}"
        elif data['additional_action'] == 'seven_am':
            tmp_msg = f"‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 7:30 –∫—Ä—É–∂–æ—á–µ–∫ –≤ –∑–µ—Ä–∫–∞–ª–µ, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}"
        elif data['additional_action'] == 'eight_am':
            tmp_msg = f"‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 8:30 –∫—Ä—É–∂–æ—á–µ–∫ –≤ –∑–µ—Ä–∫–∞–ª–µ, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}"
        video = "client/media/videos/morning.mp4"
    elif data['action'] == 'language':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏ —Å–≤–æ–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è, "
                   f"–∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/language.mp4"
    elif data['action'] == 'money':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –≤–∏–¥–µ–æ-–∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ —Å–æ —Å–≤–æ–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞,"
                   f" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –Ω–∞ –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/bank.mp4"
    elif data['action'] == 'food':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤–æ–π –µ–¥—ã,"
                   f" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/food.mp4"
    elif data['action'] == 'programming':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è,"
                   f" –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        video = "client/media/videos/programming.mp4"
    elif data['action'] == 'instruments':
        tmp_msg = ("‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –º—É–∑."
                   f" –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}")
        if data['additional_action'] == 'piano':
            video = InputFile("client/media/videos/piano.mp4")
        elif data['additional_action'] == 'guitar':
            video = InputFile("client/media/videos/guitar.mp4")
    elif data['action'] == 'painting':
        tmp_msg = f"‚è∞ –û—Ç–ø—Ä–∞–≤—å –¥–æ 22:30 –∫—Ä—É–∂–æ—á–µ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è, –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–æ–¥ üîí {new_code}"
        video = "client/media/videos/painting.mp4"

    return [tmp_msg, video]


async def diary_button(call: types.CallbackQuery, state: FSMContext):
    msg = ("üìù –î–Ω–µ–≤–Ω–∏–∫ ‚Äî —ç—Ç–æ —á–µ—Å—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ "
           "—Å —Å–∞–º–∏–º —Å–æ–±–æ–π, —Å–æ —Å–≤–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ¬´–Ø¬ª –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ.\n\n"
           "–î–Ω–µ–≤–Ω–∏–∫ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ"
           "–≤ —á—ë–º-–ª–∏–±–æ. –ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ "
           "–∫ –µ—ë —Ä–µ—à–µ–Ω–∏—é.\n\n"
           "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Ç—ã –º–æ–∂–µ—à—å –¥–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∏–∫—É–¥–∞ –Ω–µ "
           "–æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∏ "
           "–æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å, –Ω–∞–µ–¥–∏–Ω–µ —Å —Ç–æ–±–æ–π.\n\n"
           "–ü–µ—Ä–µ—á–∏—Ç–∞–π –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö, –ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–µ–±—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π —Å–≤–æ–π –ø—É—Ç—å")

    await state.update_data(number_question=random.randint(0, 45))
    await call.message.answer(text=msg, reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='üé≤ –†–∞–Ω–¥–æ–º–Ω–æ', callback_data='random_questions')))
    await call.answer()


async def random_question(call: types.CallbackQuery, state: FSMContext):
    number = await state.get_data()
    ind = number['number_question']
    second_ind = random.randint(0, 29)
    if second_ind == ind:
        second_ind = random.randint(0, 29)
    await state.update_data(number_question=second_ind)
    await call.message.answer(text=questions[second_ind], reply_markup=admit_or_pass_keyboard)
    await call.answer()


async def admit_answer(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.diary.set()
    msg = "üí¨ –ü–∏—à–∏ –≤—Å—ë, —á—Ç–æ –ø—Ä–∏–¥—ë—Ç –≤ –≥–æ–ª–æ–≤—É:"
    await call.message.answer(text=msg)
    await call.answer()


async def next_question(call: types.CallbackQuery, state: FSMContext):
    await call.bot.delete_message(call.message.chat.id, call.message.message_id)
    number = await state.get_data()
    ind = number['number_question']
    second_ind = random.randint(0, 29)
    if second_ind == ind:
        second_ind = random.randint(0, 29)
    await state.update_data(number_question=second_ind)
    await call.message.answer(text=questions[second_ind], reply_markup=admit_or_pass_keyboard)
    await call.answer()


async def dispute_rules(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    start_time_dispute = ""
    array = ['alcohol', 'drugs', 'smoking', 'gym', 'weight', 'language', 'programming', 'paint', 'food',
             'instruments']

    if data['action'] in array:
        start_time_dispute = "6:00 –¥–æ 22:30 –≤–µ—á–µ—Ä–∞."
    else:
        if data['additional_action'] == 'five_am':
            start_time_dispute = "5:00‚Äì5:30 —É—Ç—Ä–∞."
        elif data['additional_action'] == 'six_am':
            start_time_dispute = "6:00‚Äì6:30 —É—Ç—Ä–∞."
        elif data['additional_action'] == 'seven_am':
            start_time_dispute = "7:00‚Äì7:30 —É—Ç—Ä–∞."
        elif data['additional_action'] == 'eight_am':
            start_time_dispute = "8:00‚Äì8:30 —É—Ç—Ä–∞."
    promocode = '0'
    if data['promocode'] != '0':
        promocode = '1'

    tmp_msg = ("üòá –ü—Ä–∞–≤–∏–ª–∞ –¥–∏—Å–ø—É—Ç–∞\n\n"
               f"–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–≤–æ–π —Ä–µ–ø–æ—Ä—Ç –≤ —ç—Ç–æ–º –¥–∏—Å–ø—É—Ç–µ –≤ –ø–µ—Ä–∏–æ–¥ —Å {start_time_dispute}\n\n"
               "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Ü–∏—Ñ—Ä, "
               "–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –Ω–∞ –≤–∏–¥–µ–æ, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ, –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–æ—Ç –≤–æ–≤—Ä–µ–º—è.\n\n"
               "üëç –ï—Å–ª–∏ –≤—Å–µ –æ–∫, –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∏"
               "–≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç\n\n"
               "üëé –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–ø–æ—Ä–∞ –Ω–∞—Ä—É—à–µ–Ω—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ —Å–Ω–∞—á–∞–ª–∞ "
               "20% –¥–µ–ø–æ–∑–∏—Ç–∞, –∞ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ 80%.\n\n"
               f"–ü—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫—É: {promocode}")

    await call.message.edit_caption(caption=tmp_msg, reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='üëç –°–ø–∞—Å–∏–±–æ', callback_data='Thanks1')))
    await call.answer()


async def return_reports(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.reports.set()
    await call.message.edit_caption(caption="", reply_markup=report_keyboard)
    await call.answer()


async def awards(call: types.CallbackQuery, state: FSMContext):
    cur_state = await state.get_state()
    if cur_state == "StatesDispute:reports" or cur_state == "StatesDispute:bonuses":
        await StatesDispute.bonuses.set()
    else:
        return
    tmp_msg = ("üëë –ë–æ–Ω—É—Å—ã ‚Äî 0 ‚ÇΩ\n\n"
               "–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ üí∞ –≤ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç")

    # data = await state.get_data()
    #
    # try:
    #     await call.bot.delete_message(chat_id=call.message.chat.id,
    #                                   message_id=data['promocode_msg_delete'])
    #     await call.bot.delete_message(chat_id=call.message.chat.id,
    #                                   message_id=data['promocode_msg_delete'] + 1)
    # finally:
    #     """if is_deleted['is_deleted'] == 1:
    #     await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id + 1)
    #     await call.bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id + 2)
    #     await state.update_data(is_deleted=0)
    #     """
    await call.message.edit_caption(caption=tmp_msg, reply_markup=awards_keyboard)
    await call.answer()


async def promo_code_awards(call: types.CallbackQuery, state: FSMContext):
    tmp_msg = ("üéü –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –¥—Ä—É–∑—å—è–º –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ —Ç–æ–º, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—à—å —Å–≤–æ–π –ø—É—Ç—å –∏ –¥–∞—Ä–∏ üéÅ –ø—Ä–æ–º–æ-–∫–æ–¥ "
               "–Ω–∞ –ø—Ä–∞–≤–æ –æ–¥–Ω–æ–π –æ—à–∏–±–∫–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–∞ –≤ –î–∏—Å–ø—É—Ç–µ.\n\n"
               "–ü–æ–ª—É—á–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 1 000 ‚ÇΩ –Ω–∞ —Å—á—ë—Ç —Å–≤–æ–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–º–µ—Ç –≤—ã–∑–æ–≤"
               " –∏ —Å—Ä–∞–∑–∏—Ç—Å—è —Å —Å–æ–±–æ–π.\n\n"
               "–î–µ–ª–∏—Å—å —Å–≤–æ–∏–º –ø—Ä–æ–º–æ-–∫–æ–¥–æ–º –≤ –ª—é–±—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å —É–∫–∞–∑–∞–Ω–∏–µ–º "
               "—Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç ‚Äì t.me/Dlspute_bot")

    await call.message.edit_caption(caption=tmp_msg, reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='üéü –ú–æ–π –∫–æ–¥', callback_data='user_promocode'),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_awards')))

    await call.answer()


async def my_promocode(call: types.CallbackQuery):
    print("PROMOCODE ENTER: ", call.message.message_id)
    return_keyboard = types.InlineKeyboardMarkup()
    return_keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_promocode_rules'))
    user_promocode = await User.objects.filter(user_id=call.from_user.id).alast()
    await call.message.edit_caption(caption=f"`{user_promocode.promocode_user}`\n–ó–∞–∂–º–∏ –ø—Ä–æ–º–æ-–∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                                    parse_mode=ParseMode.MARKDOWN, reply_markup=return_keyboard)

    await call.answer()


async def dispute_awards(call: types.CallbackQuery, state: FSMContext):
    tmp_msg = ("‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ª—É—á—à–∏–π –∫—Ä—É–∂–æ—á–µ–∫ "
               "–Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å DisputeAward.\n\n"

               "–ù–∞ —Ç–≤–æ–π –ø—Ä–∏–º–µ—Ä —Å–º–æ–≥—É—Ç —Ä–æ–≤–Ω—è—Ç—å—Å—è "
               "—Ç—ã—Å—è—á–∏ –∏–≥—Ä–æ–∫–æ–≤, –∞ —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å"
               "+5 000 ‚ÇΩ –∫ —Å–≤–æ–µ–º—É –¥–µ–ø–æ–∑–∏—Ç—É.\n\n"

               "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –≤–∏–¥–µ–æ / –º–µ—Å.")

    await call.message.edit_caption(caption=tmp_msg, reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='üëÄ –í—ã–±—Ä–∞—Ç—å', callback_data='choose_video_to_dispute_award'),
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return_to_bonuses')))
    await call.answer()


async def choose_video_to_contest(call: types.CallbackQuery):
    user = await User.objects.aget(user_id=call.from_user.id)
    tmp_msg = "–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 7 –¥–Ω–µ–π –≤ –∏–≥—Ä–µ"
    if user.count_days < 23:
        await call.message.edit_caption(caption='–í—ã–±–µ—Ä–∏ –≤–∏–¥–µ–æ...')
    else:
        await call.message.edit_caption(caption=tmp_msg, reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return_to_awards')))


async def deposit_button(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.update_data(id_to_delete=call.message.message_id)

    tmp_msg = (f"*üí∞ –î–µ–ø–æ–∑–∏—Ç: {data['deposit']} ‚ÇΩ*\n"
               f"{data['deposit']} ‚ÇΩ \+ 0 ‚ÇΩ –±–æ–Ω—É—Å–æ–≤\n\n"
               "–¢–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –∏ –±–æ–Ω—É—Å—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –≤ –î–∏—Å–ø—É—Ç–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–±–µ–¥—ã –≤ —Å–ø–æ—Ä–µ –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ "
               "–∏–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã\n\n"
               "‚ö†Ô∏èÔ∏è –ë–æ–Ω—É—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤—ã–≤–æ–¥—É\\.")

    await call.message.answer(text=tmp_msg, reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='–í—ã–≤–æ–¥ üí∞', callback_data='withdrawal_deposit'),
        types.InlineKeyboardButton(text='–õ–∏—á–Ω—ã–µ üéØÔ∏è —Ü–µ–ª–∏', callback_data='personal_goals')),
                              parse_mode=ParseMode.MARKDOWN_V2)
    await call.answer()


async def personal_goals(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.personal_goals.set()
    photo = InputFile("client/media/volya/volya1.jpg")
    await call.message.answer_photo(photo=photo,
                                    caption=personal_goals_msg,
                                    reply_markup=types.InlineKeyboardMarkup().add(
                                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_account")
                                    ))


async def return_to_account(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.account.set()

    user = await state.get_data()
    # await call.bot.delete_message(message_id=user['id_to_delete'], chat_id=call.message.chat.id)
    # await call.bot.delete_message(message_id=call.message.message_id, chat_id=call.message.chat.id)

    msg = (f"üëã *–ü—Ä–∏–≤–µ—Ç, {user['name']}* \n\n"
           "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è, –≤—ã–≤–µ—Å—Ç–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç, "
           "–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—Ö. "
           "–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

    await call.message.answer(text=msg, reply_markup=account_keyboard, parse_mode=ParseMode.MARKDOWN)


async def withdraw_deposit(call: types.CallbackQuery, state: FSMContext):
    user = await User.objects.filter(user_id=call.from_user.id).alast()

    tmp_msg = (f"üö©*–î–æ –ø–æ–±–µ–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å {user.count_days} –¥–Ω–µ–π\.*\n\n"

               "–ü—Ä–æ–π–¥–∏ —Å–≤–æ–π –ü—É—Ç—å –ì–µ—Ä–æ—è –∏ –≤—ã–≤–æ–¥ —Ç–≤–æ–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é "
               "–∫–∞—Ä—Ç—É –∏–ª–∏ –≤ BTC —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –æ–∫–Ω–µ")
    # TODO –î–æ–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞
    await call.message.answer(text=tmp_msg, parse_mode=ParseMode.MARKDOWN_V2)
    await call.answer()


async def view_user_timezone(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tmp_msg = f"üåç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {data['timezone']} UTC"
    back_or_send_keyboard = types.InlineKeyboardMarkup()
    back_or_send_keyboard.add(types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ üëç', callback_data='cancel_edit_timezone'),
                              types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='confirm_to_change_timezone'))
    await call.message.edit_text(text=tmp_msg, reply_markup=back_or_send_keyboard)


async def change_timezone(call: types.CallbackQuery, state: FSMContext):
    geo_position_msg = (
        "üåç –£–∫–∞–∂–∏ —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC (–ú–æ—Å–∫–≤–∞ +3, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ +7 –∏ —Ç–¥) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≤ –±–æ—Ç "
        "–≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–≤–æ–∑—å–º–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å)")
    await StatesDispute.new_timezone.set()
    # test_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # test_keyboard.add(types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ üìç', request_location=True))
    #
    await call.message.answer(text=geo_position_msg, reply_markup=choose_time_zone_keyboard)
    await call.answer()


async def return_account(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.account.set()
    user = await state.get_data()
    msg = (f"üëã *–ü—Ä–∏–≤–µ—Ç, {user['name']}* \n\n"
           "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è, –≤—ã–≤–µ—Å—Ç–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç, "
           "–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—Ö. "
           "–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

    await call.message.edit_text(text=msg, reply_markup=account_keyboard, parse_mode=ParseMode.MARKDOWN)
    await call.answer()


async def new_time_zone(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(timezone=call.data)
    user = User.objects.filter(user_id=call.from_user.id).last()
    user.timezone = call.data
    user.save()
    tmp_msg = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {call.data} UTC"
    await change_period_task_info(user.user_id, call.data)
    await StatesDispute.none.set()
    await call.message.answer(text=tmp_msg, reply_markup=menu_keyboard)
    await call.answer()


async def support_button(call: types.CallbackQuery, state: FSMContext):
    tmp_msg = ("üÜò *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n"

               "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—ë—à—å—Å—è —Å —ç—Ç–∏–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏ –Ω–∞—à–∏ –∞—Ä–±–∏—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–∏–¥—É—Ç "
               "–Ω–∞ –ø–æ–º–æ—â—å.\n\n"

               "–ë—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Ç–≤–æ–µ–º—É –æ–ø—ã—Ç—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º –Ω–∞ —Ç–≤–æ–µ–π "
               "—Å—Ç–æ—Ä–æ–Ω–µ ü§ù")

    await call.message.edit_text(text=tmp_msg, reply_markup=types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', callback_data='send_new_support')),
                                 parse_mode=ParseMode.MARKDOWN)
    await call.answer()


async def new_support_question(call: types.CallbackQuery, state: FSMContext):
    await StatesDispute.new_question.set()

    await call.message.answer(text='üí¨ –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    await call.answer()


async def new_review(call: types.CallbackQuery, state: FSMContext):
    await NewReview.input_city.set()
    await call.message.answer(text="üåá –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")


async def new_coment(call: types.CallbackQuery, state: FSMContext):
    await NewReview.input_review.set()
    await state.update_data(stars=call.data)

    await call.message.answer(text="üí¨ –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:")


def register_callback(bot, dp: Dispatcher):
    dp.register_callback_query_handler(begin_dispute, text='go_dispute', state="*")
    dp.register_callback_query_handler(reports, text='report', state=StatesDispute.none, kwargs={'dp': dp})

    dp.register_callback_query_handler(choose_name_button, text='change_name', state=StatesDispute.account)
    dp.register_callback_query_handler(change_name, text='change_name_access', state=StatesDispute.account)

    dp.register_callback_query_handler(check_report, text="send_new_report", state=StatesDispute.reports)
    dp.register_callback_query_handler(send_new_report_from_admin, text="send_dispute_report", state="*")

    dp.register_callback_query_handler(diary_button, text='diary', state=StatesDispute.none)
    dp.register_callback_query_handler(random_question, text='random_questions', state=StatesDispute.none)
    dp.register_callback_query_handler(admit_answer, text='admit', state=StatesDispute.none)
    dp.register_callback_query_handler(admit_answer, text='admit', state=StatesDispute.diary)
    dp.register_callback_query_handler(next_question, text='pass', state=StatesDispute.none)
    dp.register_callback_query_handler(next_question, text='pass', state=StatesDispute.diary)

    dp.register_callback_query_handler(dispute_rules, text='rules', state=StatesDispute.reports)
    dp.register_callback_query_handler(return_reports, text='Thanks1', state=StatesDispute.reports)

    dp.register_callback_query_handler(awards, text='bonuses', state=StatesDispute.reports)
    dp.register_callback_query_handler(awards, text='return_to_bonuses', state=StatesDispute.bonuses)

    dp.register_callback_query_handler(return_reports, text='return_to_reports', state=StatesDispute.bonuses)
    dp.register_callback_query_handler(promo_code_awards, text='1promo_code1', state=StatesDispute.bonuses)
    dp.register_callback_query_handler(awards, text='back_awards', state=StatesDispute.bonuses)
    dp.register_callback_query_handler(promo_code_awards, text='back_to_promocode_rules', state=StatesDispute.bonuses)
    dp.register_callback_query_handler(my_promocode, text='user_promocode', state=StatesDispute.bonuses)

    dp.register_callback_query_handler(dispute_awards, text='dispute_award', state=StatesDispute.bonuses)
    dp.register_callback_query_handler(dispute_awards, text='return_to_awards', state=StatesDispute.bonuses)
    dp.register_callback_query_handler(choose_video_to_contest, text='choose_video_to_dispute_award',
                                       state=StatesDispute.bonuses)

    dp.register_callback_query_handler(deposit_button, text='deposit', state=StatesDispute.account)
    dp.register_callback_query_handler(withdraw_deposit, text='withdrawal_deposit', state=StatesDispute.account)

    dp.register_callback_query_handler(view_user_timezone, text='change_timezone', state=StatesDispute.account)
    dp.register_callback_query_handler(change_timezone, text='confirm_to_change_timezone', state=StatesDispute.account)

    dp.register_callback_query_handler(return_account, text='cancel_change_name', state=StatesDispute.account)
    dp.register_callback_query_handler(return_account, text='cancel_edit_timezone', state=StatesDispute.account)

    dp.register_callback_query_handler(new_time_zone, text='‚Äî 10', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 9:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 9', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 8', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 7', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 6', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 5', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 4', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 3:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 3', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 2', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='‚Äî 1', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+0', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+1', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+2', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+3', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+3:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+4', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+4:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+5', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+5:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+5:45', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+6', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+6:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+7', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+8', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+8:45', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+9', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+9:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+10', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+10:30', state=StatesDispute.new_timezone)
    dp.register_callback_query_handler(new_time_zone, text='+11', state=StatesDispute.new_timezone)

    dp.register_callback_query_handler(support_button, text='support', state=StatesDispute.account)

    dp.register_callback_query_handler(new_support_question, text='send_new_support', state=StatesDispute.account)
    dp.register_callback_query_handler(new_support_question, text='send_new_support', state=StatesDispute.states)
    dp.register_callback_query_handler(recieved_video, text='send_video', state=StatesDispute.video)
    dp.register_callback_query_handler(recieved_video, text='send_video', state=StatesDispute.video_note)

    # dp.register_callback_query_handler(my_promocode, text='user_promocode', state=StatesDispute.promo_code)
    dp.register_callback_query_handler(personal_goals, text='personal_goals', state=StatesDispute.states)
    dp.register_callback_query_handler(return_to_account, text="back_account", state=StatesDispute.personal_goals)

    dp.register_callback_query_handler(reports, text='nice_god_job', state="*", kwargs={'dp': dp})
    dp.register_callback_query_handler(reports, text='try_again', state="*", kwargs={'dp': dp})
    dp.register_callback_query_handler(send_new_report_from_admin, text="send_new_video", state=StatesDispute.video)
    dp.register_callback_query_handler(send_new_report_from_admin, text="send_new_video",
                                       state=StatesDispute.video_note)

    dp.register_callback_query_handler(new_review, text='new_review', state="*")
    dp.register_callback_query_handler(new_coment, text='one', state="*")
    dp.register_callback_query_handler(new_coment, text='two', state="*")
    dp.register_callback_query_handler(new_coment, text='three', state="*")
    dp.register_callback_query_handler(new_coment, text='four', state="*")
    dp.register_callback_query_handler(new_coment, text='five', state="*")
