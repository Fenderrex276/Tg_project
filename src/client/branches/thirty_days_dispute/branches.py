import datetime
import random

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, InputFile
from aiogram.utils.markdown import link
from asgiref.sync import sync_to_async

from utils import get_timezone
from .diary import questions
from .keyboards import *
from .states import StatesDispute, NewReview
from .callbacks import video_text
from db.models import Supt, User, Reviews, RoundVideo
import pytz
from .callbacks import random_question


class CurrentDispute:
    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_commands()
        self.register_handlers()

    def register_commands(self):
        ...

    def register_handlers(self):
        self.dp.register_message_handler(self.the_hero_path, text=[menu_keyboard, "‚úÖ –ü—É—Ç—å –≥–µ—Ä–æ—è"],
                                         state=StatesDispute.all_states)
        self.dp.register_message_handler(self.knowledge_base, text=[menu_keyboard, "üíö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"],
                                         state="*")
        self.dp.register_message_handler(self.account, text=[menu_keyboard, "üü¢ –ê–∫–∫–∞—É–Ω—Ç"],
                                         state="*")

        self.dp.register_message_handler(self.process_name_invalid, lambda message: len(message.text) > 20,
                                         state=StatesDispute.change_name)

        self.dp.register_message_handler(self.input_name, state=StatesDispute.change_name)
        self.dp.register_message_handler(self.recieve_video_note, content_types=['video_note'],
                                         state=StatesDispute.video_note)
        self.dp.register_message_handler(self.recieve_video, content_types=['video'], state=StatesDispute.video_note)
        self.dp.register_message_handler(self.is_not_a_video,
                                         content_types=['text', 'audio', 'photo', 'sticker', 'voice'],
                                         state=StatesDispute.video)
        self.dp.register_message_handler(self.is_not_a_video,
                                         content_types=['text', 'audio', 'photo', 'sticker', 'voice'],
                                         state=StatesDispute.video_note)
        self.dp.register_message_handler(self.inpute_answer, state=StatesDispute.diary)
        self.dp.register_message_handler(self.input_support, state=StatesDispute.new_question)
        self.dp.register_message_handler(self.new_timezone, content_types=['location'],
                                         state=StatesDispute.new_timezone)
        self.dp.register_message_handler(self.input_city, state=NewReview.input_city)
        self.dp.register_message_handler(self.get_coment, state=NewReview.input_review)

    async def the_hero_path(self, message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        print(current_state)
#        await StatesDispute.none.set()
        if current_state in StatesDispute.states_names:
            await StatesDispute.none.set()
            print(current_state)
        else:
            return

        """user = await User.objects.filter(user_id=message.from_user.id).alast()
        await state.update_data(action=user.action,
                                additional_action=user.additional_action,
                                start_disput=user.start_disput,
                                promocode=user.promocode_from_friend,
                                timezone=user.timezone,
                                name=user.user_name,
                                deposit=user.deposit,
                                id_dispute=user.number_dispute)
        """
        data = await state.get_data()
        print(data)
        user = await User.objects.filter(user_id=message.from_user.id).alast()
        count_days = user.count_days

        recieve_message = video_text(data, count_days)
        print('HEROPATH, ', message.message_id)
        await message.answer_photo(photo=InputFile(recieve_message[0]),
                                   caption=recieve_message[1],
                                   reply_markup=report_diary_keyboard,
                                   parse_mode=ParseMode.MARKDOWN)

    async def knowledge_base(self, message: types.Message):
        await StatesDispute.knowledge_base.set()
        msg = ("*üíö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π* \n\n"
               "–ß–∏—Ç–∞–π—Ç–µ –æ —Ç–æ–º, –∫–∞–∫ –∂–∏–≤—É—Ç –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∞–º—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –ª—é–¥–∏ –ø–ª–∞–Ω–µ—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–º—ã,"
               " –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–µ–ª–∏–∫–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –∫–∏–Ω–æ, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ —Ç–æ–º, "
               "–∫–∞–∫ –ª–µ–≥—á–µ –∏ –ø—Ä–æ—â–µ –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ–∫—É—Å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é:")

        await message.answer(text=msg, reply_markup=knowledge_base_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

    async def account(self, message: types.Message, state: FSMContext):
        await StatesDispute.account.set()
        user = await state.get_data()
        msg = (f"üëã *–ü—Ä–∏–≤–µ—Ç, {user['name']}* \n\n"
               "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è, –≤—ã–≤–µ—Å—Ç–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç, "
               "–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—Ö. "
               "–ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

        await message.answer(text=msg, reply_markup=account_keyboard, parse_mode=ParseMode.MARKDOWN)

    async def new_timezone(self, message: types.Message, state: FSMContext):
        loc = message.location
        # print(loc)
        tmp = get_timezone(loc)
        await state.update_data(timezone=tmp[:len(tmp) - 4])
        user = await User.objects.filter(user_id=message.from_user.id).alast()
        user.timezone = tmp[:len(tmp) - 4]
        user.save()
        msg = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {tmp}"
        await StatesDispute.none.set()
        await message.answer(text=msg, reply_markup=menu_keyboard)

    async def input_name(self, message: types.Message, state: FSMContext):
        await StatesDispute.account.set()
        await state.update_data(name=message.text)
        user = await User.objects.filter(user_id=message.from_user.id).alast()
        user.user_name = message.text
        user.save()
        await message.answer(text='–ì–æ—Ç–æ–≤–æ!')

    async def process_name_invalid(self, message: types.Message):
        msg = "–ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
        return await message.answer(msg)

    async def recieve_video_note(self, message: types.Message, state: FSMContext):
        file_id = message.video_note.file_id
        await state.update_data(video_id=file_id)

        tmp_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—ë—Ç–∫–æ –ª–∏ —Å–ª—ã—à–µ–Ω üì£ –∫–æ–¥ –Ω–∞ —ç—Ç–æ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
        await message.answer(text=tmp_msg, reply_markup=send_video_keyboard)

    async def recieve_video(self, message: types.Message, state: FSMContext):
        file_id = message.video.file_id

        await state.update_data(video_id=file_id)

        tmp_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—ë—Ç–∫–æ –ª–∏ —Å–ª—ã—à–µ–Ω üì£ –∫–æ–¥ –Ω–∞ —ç—Ç–æ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
        await message.answer(text=tmp_msg, reply_markup=send_video_keyboard)

    async def is_not_a_video(self, message: types.Message):
        error_message = "–û—à–∏–±–∫–∞. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç–µ."
        await message.answer(text=error_message)

    async def inpute_answer(self, message: types.Message, state: FSMContext):
        print(message.text)

        await message.answer('–ì–æ—Ç–æ–≤–æ!')
        number = await state.get_data()
        ind = number['number_question']
        second_ind = random.randint(0, 29)
        if second_ind == ind:
            second_ind = random.randint(0, 29)
        await state.update_data(number_question=second_ind)
        await message.answer(text=questions[second_ind], reply_markup=admit_or_pass_keyboard)

    async def input_support(self, message: types.Message, state: FSMContext):
        try:
            nd = await User.objects.filter(user_id=message.from_user.id).alast()
            n = nd.number_dispute
        except:
            n = 0
        await Supt.objects.acreate(user_id=message.from_user.id,
                                   number_dispute=n,
                                   chat_id=message.chat.id,
                                   problem=message.text,
                                   solved=Supt.TypeSolve.new)
        await StatesDispute.none.set()
        await message.answer(text='–ì–æ—Ç–æ–≤–æ! ü§ó –°–ø–∞—Å–∏–±–æ')

    async def input_city(self, message: types.Message, state: FSMContext):

        await NewReview.none.set()
        await state.update_data(city_for_review=message.text)
        await message.answer(text="üé≤ –û—Ü–µ–Ω–∏ –∏–≥—Ä—É –∏ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:", reply_markup=mark_keyboard)

    async def get_coment(self, message: types.Message, state: FSMContext):
        user = await User.objects.filter(user_id=message.from_user.id).alast()
        current_video = await RoundVideo.objects.filter(user_tg_id=message.from_user.id,
                                                        type_video=RoundVideo.TypeVideo.archive).alast()
        data = await state.get_data()
        await NewReview.none.set()
        await Reviews.objects.acreate(user_id=message.from_user.id,
                                      chat_id=message.chat.id,
                                      user_name=user.user_name,
                                      id_dispute=current_video.id_video,
                                      city=data['city_for_review'],
                                      mark=data['stars'],
                                      coment=message.text,
                                      state_t=Reviews.StateReview.new
                                      )

        await message.answer(text="–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤ ‚ù§Ô∏è", reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(text='–°–ø–æ—Ä–∏–º ü§ù –µ—â—ë', callback_data='new_dispute')))

