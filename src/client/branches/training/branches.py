# from utils import datetime_to_miliseconds
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from client.branches.pay.keyboards import next_step_keyboard
from client.branches.thirty_days_dispute.keyboards import menu_keyboard
from client.branches.training.messages import pin_chat_msg
from client.branches.training.states import Video
from client.branches.training.keyboards import *
from db.models import User, Supt, RoundVideo
from client.branches.pay.callbacks import start_current_disput
from client.branches.pay.states import PayStates

class Training:
    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_commands()
        self.register_handlers()

    def register_commands(self):
        # –∫–æ–º–∞–Ω–¥—ã
        ...

    def register_handlers(self):
        self.dp.register_message_handler(self.recieve_video_note, content_types=['video_note'],
                                         state=Video.recv_video_note)
        self.dp.register_message_handler(self.recieve_video, content_types=['video'], state=Video.recv_video)
        self.dp.register_message_handler(self.is_not_a_video,
                                         content_types=['text', 'audio', 'photo', 'sticker', 'voice'],
                                         state=Video.recv_video)
        self.dp.register_message_handler(self.is_not_a_video,
                                         content_types=['text', 'audio', 'photo', 'sticker', 'voice', 'video'],
                                         state=Video.recv_video_note)

        self.dp.register_message_handler(self.input_support, state=Video.new_question)

        # self.dp.register_message_handler(self.demo_hero_path, text=["‚úÖ –ü—É—Ç—å –≥–µ—Ä–æ—è"], state=PayStates.all_states)

    async def demo_hero_path(self, message: types.Message, state: FSMContext):
        try:
            user_video = await RoundVideo.objects.filter(user_tg_id=message.from_user.id,
                                                         chat_tg_id=message.chat.id,
                                                         type_video=RoundVideo.TypeVideo.test
                                                         ).alast()

            # user_video = await RoundVideo.objects.aget(id_video=data['id_video_code'])
            if user_video.status == "" and user_video.tg_id is not None:
                tmp_msg = "üéà –°–ø–∞—Å–∏–±–æ, —Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏."
                await message.answer(text=tmp_msg)
            else:
                await message.answer(text=pin_chat_msg, reply_markup=success_keyboard)
        except RoundVideo.DoesNotExist:

            purpose = ""
            video_with_code = ""
            time_before = "22:30"
            data = await state.get_data()

            if data['action'] == 'alcohol':
                purpose = "üç∑ –ë—Ä–æ—à—É –ø–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∞–ª–∫–æ—Ç–µ—Å—Ç–æ–º"

            elif data['action'] == 'smoking':
                purpose = "üö¨ –ë—Ä–æ—à—É –∫—É—Ä–∏—Ç—å –Ω–∏–∫–æ—Ç–∏–Ω"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º"
            elif data['action'] == 'drugs':
                purpose = "üíä –ë—Ä–æ—à—É —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –ü–ê–í"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ —ç–∫—Å–ø—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–º –Ω–∞ –ü–ê–í"
            elif data['action'] == "gym":
                purpose = "üí™ –ë—É–¥—É —Ö–æ–¥–∏—Ç—å –≤ —Å–ø–æ—Ä—Ç-–∑–∞–ª"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ —Å–ø–æ—Ä—Ç-–∑–∞–ª–∞"
            elif data['action'] == "weight":
                purpose = "üå± –ü–æ—Ö—É–¥–µ—é –Ω–∞ 5 –∫–≥"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å –∫–æ–¥–æ–º"
            elif data['action'] == "morning":
                if data['additional_action'] == 'five_am':
                    time_before = "5:30"
                    purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 5 —É—Ç—Ä–∞"
                elif data['additional_action'] == 'six_am':
                    time_before = "6:30"
                    purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 6 —É—Ç—Ä–∞"
                elif data['additional_action'] == 'seven_am':
                    time_before = "7:30"
                    purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 7 —É—Ç—Ä–∞"
                elif data['additional_action'] == 'eight_am':
                    time_before = "8:30"
                    purpose = "üå§ –ë—É–¥—É –≤—Å—Ç–∞–≤–∞—Ç—å –≤ 8 —É—Ç—Ä–∞"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –≤ –∑–µ—Ä–∫–∞–ª–µ –≤–∞–Ω–Ω—ã"
            elif data['action'] == "language":
                if data['additional_action'] == 'english':
                    purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"
                elif data['additional_action'] == 'chinese':
                    purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫"
                elif data['additional_action'] == 'spanish':
                    purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫"
                elif data['additional_action'] == 'arabian':
                    purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∞—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫"
                elif data['additional_action'] == 'italian':
                    purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —è–∑—ã–∫"
                elif data['additional_action'] == 'french':
                    purpose = "üá¨üáß –ë—É–¥—É —É—á–∏—Ç—å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏"
            elif data['action'] == 'money':
                if data['additional_action'] == 'hundred':
                    purpose = "üí∞–ù–∞–∫–æ–ø–ª—é 100 000 ‚ÇΩ"
                elif data['additional_action'] == 'three_hundred':
                    purpose = "üí∞–ù–∞–∫–æ–ø–ª—é 300 000 ‚ÇΩ"
                video_with_code = "ü§≥ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∏–∑ –±–∞–Ω–∫–∞ —Å –∫–æ–¥–æ–º"
            elif data['action'] == 'food':
                purpose = "üçè –ù–∞—É—á—É—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—É—é –µ–¥—É"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
            elif data['action'] == 'programming':
                purpose = "üíª –ù–∞—É—á—É—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
            elif data['action'] == 'instruments':
                if data['additional_action'] == 'piano':
                    purpose = "üéº –ù–∞—É—á—É—Å—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ"
                elif data['additional_action'] == 'guitar':
                    purpose = "üéº –ù–∞—É—á—É—Å—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –≥–∏—Ç–∞—Ä–µ"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
            elif data['action'] == 'painting':
                purpose = "üé® –ù–∞—É—á—É—Å—å —Ä–∏—Å–æ–≤–∞—Ç—å"
                video_with_code = "ü§≥ –í–∏–¥–µ–æ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
            promo = data['promocode']
            if promo != '0':
                promo = '1'
            start_current_disput_msg = (f"üëã –ü—Ä–∏–≤–µ—Ç, {data['user_name']},"
                                        f" –∑–∞–≤–µ—Ä—à–∏ —Å–≤–æ—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Ü–µ–ª–∏ –∏ –Ω–∞—á–Ω–∏ –ø—É—Ç—å –≥–µ—Ä–æ—è.\n\n"
                                        "*–¢–≤–æ—è —Ü–µ–ª—å:*\n"
                                        f"{purpose}\n"
                                        f"üßä –î–µ–ø–æ–∑–∏—Ç: {data['deposit']} ‚ÇΩ \n\n"
                                        "*–£—Å–ª–æ–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π*\n"
                                        f"{video_with_code}\n"
                                        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –±–æ—Ç –¥–æ {time_before}\n\n"
                                        "–î–æ –ø–æ–±–µ–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å 30 –¥–Ω–µ–π\n"
                                        f"–ü—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫—É: {promo}")

            await message.answer(text=start_current_disput_msg,
                                 parse_mode=ParseMode.MARKDOWN, reply_markup=next_step_keyboard)

    async def recieve_video_note(self, message: types.Message, state: FSMContext):
        file_id = message.video_note.file_id
        await state.update_data(video_id=file_id)

        tmp_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—ë—Ç–∫–æ –ª–∏ —Å–ª—ã—à–µ–Ω üì£ –∫–æ–¥ –Ω–∞ —ç—Ç–æ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
        await message.answer(text=tmp_msg, reply_markup=send_video_keyboard)

    async def recieve_video(self, message: types.Message, state: FSMContext):
        file_id = message.video.file_id

        await state.update_data(video_id=file_id)

        tmp_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, —á—ë—Ç–∫–æ –ª–∏ —Å–ª—ã—à–µ–Ω üì£ –∫–æ–¥ –Ω–∞ —ç—Ç–æ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
        await message.answer(text=tmp_msg, reply_markup=send_video_keyboard)

    async def is_not_a_video(self, message: types.Message):
        error_message = "–û—à–∏–±–∫–∞. –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ–æ-—Ñ–æ—Ä–º–∞—Ç–µ."
        await message.answer(text=error_message, reply_markup=send_help_keyboard)

    async def input_support(self, message: types.Message, state: FSMContext):

        try:
            nd = await User.objects.filter(user_id=message.from_user.id).alast()
            n = nd.number_dispute
        except:
            n = 0
        await Supt.objects.acreate(user_id=message.from_user.id,
                                   number_dispute=n,
                                   chat_id=message.chat.id,
                                   problem=message.text,
                                   solved=Supt.TypeSolve.new)

        data = await state.get_data()
        if data['action'] == 'money':
            await Video.recv_video.set()
        else:
            await Video.recv_video_note.set()

        await message.answer(text='–ì–æ—Ç–æ–≤–æ! ü§ó –°–ø–∞—Å–∏–±–æ')
