import logging

from aiogram import Bot

from admin.support_reviews.states import ReviewStates
from db.models import RoundVideo, DisputeAdmin
from settings.settings import SUPER_ADMIN
from .administration.states import AdministrationStates
from .keyboards import support_menu_keyboard
from admin.administration.keyboards import administration_menu_keyboard
from .states import AdminStates
from .—Åallbacks import *

logger = logging.getLogger(__name__)


# TODO –ù–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Å–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞
class Admin:
    def __init__(self, bot: Bot, dp: Dispatcher):
        self.bot = bot
        self.dp = dp
        self.register_commands()
        self.register_handlers()

    def register_commands(self):
        ...

    def register_handlers(self):
        self.dp.register_message_handler(self.start_handler, commands=["start"], state='*')
        self.dp.register_message_handler(self.start_handler, text=["start"], state='*')
        self.dp.register_message_handler(self.reports, text=f"‚úÖ –†–µ–ø–æ—Ä—Ç—ã", state="*")
        self.dp.register_message_handler(self.supports, text=f"üíö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã", state="*")
        self.dp.register_message_handler(self.administration, text=f"‚Äçüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", state="*")

    async def start_handler(self, message: types.Message, state: FSMContext):
        username = message['from']['username']
        try:
            admin = DisputeAdmin.objects.get(username=username)
            is_super = admin.is_super_admin
            if admin.user_id is None:
                admin.user_id = message['from']['id']
                admin.chat_id = message['chat']['id']
                admin.save()
            if not admin.is_active:
                await self.bot.send_message(message['from']['id'], text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
        except DisputeAdmin.DoesNotExist:
            if SUPER_ADMIN != username:
                await self.bot.send_message(message['from']['id'], text=f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            is_super = True
        text = f'–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞'
        admin_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)

        admin_menu.add(types.KeyboardButton(f"‚úÖ –†–µ–ø–æ—Ä—Ç—ã"))
        admin_menu.add(types.KeyboardButton(f"üíö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã"))
        if is_super:
            admin_menu.add(types.KeyboardButton(f"‚Äçüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"))
            text = f'–ú–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞'

        await self.bot.send_message(message['from']['id'], text, reply_markup=admin_menu)
        await AdminStates.is_admin.set()

    async def reports(self, message: types.Message, state: FSMContext):
        dispute_videos = RoundVideo.objects.exclude(tg_id__isnull=True).filter(status="",
                                                                               type_video=RoundVideo.TypeVideo.dispute)

        test_videos = RoundVideo.objects.exclude(tg_id__isnull=True).filter(status="",
                                                                            type_video=RoundVideo.TypeVideo.test)

        reports_menu_keyboard = types.InlineKeyboardMarkup()
        reports_menu_keyboard.add(
            types.InlineKeyboardButton(text=f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ ({len(dispute_videos)})", callback_data="every_day"))
        reports_menu_keyboard.add(
            types.InlineKeyboardButton(text=f"–¢–µ—Å—Ç–æ–≤—ã–µ ({len(test_videos)})", callback_data="test_videos"))
        reports_menu_keyboard.add(types.InlineKeyboardButton(text="–î–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (0)", callback_data="before_result"))
        reports_menu_keyboard.add(types.InlineKeyboardButton(text="–ê—Ä—Ö–∏–≤", callback_data="archive"))

        await message.answer(text="–ú–µ–Ω—é —Ä–µ–ø–æ—Ä—Ç–æ–≤", reply_markup=reports_menu_keyboard)

    async def supports(self, message: types.Message, state: FSMContext):
        await message.answer(text="üíö –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã", reply_markup=support_menu_keyboard)
        await ReviewStates.none.set()

    async def administration(self, message: types.Message, state: FSMContext):
        await message.answer(text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", reply_markup=administration_menu_keyboard)
        await AdministrationStates.none.set()
